[{"model": "schedule.speaker", "pk": 9, "fields": {"bio": "Zach is a Software Engineering graduate from McMaster University. He has previous experience in engineering high frequency trading software for private trading firms in the foreign exchange and equity markets. Today Zach is Lead Architect at Unata, where he is responsible for platform architecture design, internal services, and integration with retailer IT systems.", "name": "Zach Howard", "photo": ""}}, {"model": "schedule.speaker", "pk": 10, "fields": {"bio": "As a Sr. Technical Evangelist at Immun.io, Fr\u00e9d\u00e9ric Harper is sharing his passion for technology and helping web developers to secure their applications. Former Mozilla and Microsoft Technical Evangelist, Fred is an experienced worldwide speaker with more than 100 talks under his belt. He is also the author of \"Success in Programming: How to Gain Recognition, Power, and Influence Through Personal Branding\u201d published by Apress. Whether it's about gnomes or unicorns, you can find Fred's thoughts at outofcomfortzone.net.", "name": "Fr\u00e9d\u00e9ric Harper", "photo": ""}}, {"model": "schedule.speaker", "pk": 11, "fields": {"bio": "Chris is a PhD student in Biochemistry at University of Toronto, working at The Hospital for Sick Children in the field of computational biophysics. He earned an undergraduate degree in Computational Physics and MSc degree in Physics at University of Waterloo. He\u2019s excited about life science start-ups, especially those involving data science and computation, and reads HackerNews compulsively.", "name": "Christopher Ing", "photo": ""}}, {"model": "schedule.speaker", "pk": 12, "fields": {"bio": "Christopher is an programmer who lives in the Tasmanian city of Hobart. He currently works as an Android developer, which means his day job involves more Java than he would like. He is strongly interested in developing the Australian and International Python communities: he is director of linux.conf.au 2017, a past convenor of PyCon Australia, a board member of Linux Australia, and has been a fellow of the Python Software Foundation since 2013.\r\n\r\nIn his spare time, he enjoys presenting on Mobile development at Open Source conferences, and presenting on Open Source development at Mobile conferences. Notably, he gave an invited presentation on the state of Mobile on Python at PyCon Canada 2013.", "name": "Christopher Neugebauer", "photo": ""}}, {"model": "schedule.speaker", "pk": 13, "fields": {"bio": "Engin Arslan is a Front-End Developer with a Bachelor of Science in Materials Engineering and a Postgraduate Degree in Visual Effects. Before becoming a Front End Developer, he worked as a Visual Effects Artist / Technical Director on films and TV shows including Resident Evil, Tron, Mama, Pompeii, Vikings and Strain. He received an Emmy nomination this year for Outstanding Visual Effects for his work on Vikings, Season 3. During his time in VFX, he fell in love with Python and with programming in general. He recently changed careers to be able to immerse himself completely in software development. Engin currently works at Myplanet, a Toronto-based digital services company. He also works at Seneca College as a part-time professor, sharing his love of programming with future VFX artists.", "name": "Engin Arslan", "photo": ""}}, {"model": "schedule.speaker", "pk": 14, "fields": {"bio": "After starting his career as an embedded software engineer, Christopher Roach switched to web and mobile development. He has worked for Apple as a web and iOS developer, was the first hire at an early stage Y-Combinator funded startup, and is currently putting his Python skills to work at Linkedin. He holds degrees in Finance and Economics and a Master's degree in Computer Science, and he has worked with Python in some capacity for over 10 years now. When he\u2019s not working, you can usually find him taking classes for fun, or teaching others about Python.", "name": "Christopher Roach", "photo": ""}}, {"model": "schedule.speaker", "pk": 15, "fields": {"bio": "Jordan is a software engineer at GameChanger Media.  He finished school at Swarthmore College in 2014, and currently lives in New York City.", "name": "Jordan Singleton", "photo": ""}}, {"model": "schedule.speaker", "pk": 16, "fields": {"bio": "St\u00e9phane is Belgian software hacker, engaged and dad. Organiser of PythonFOSDEM, @ThePSF Fellow, EuroPython Society Member and Member of Association Francophone de Python and former OpenERP Core Dev (6y).\r\n\r\nIf you think distributed, asynchronous and others interesting subjects, he will be happy to discuss with you.", "name": "Stephane Wirtel", "photo": ""}}, {"model": "schedule.speaker", "pk": 17, "fields": {"bio": "Marc is a systems developer in a web world.  Thanks, to Moore\u2019s Law he was able trade C pointer wrangling for the GIL and hasn\u2019t looked back.   When not debugging concurrency issues he is kept busy by two precious kids, who really test his ability juggle two things at once.", "name": "Marc Sibson", "photo": ""}}, {"model": "schedule.speaker", "pk": 18, "fields": {"bio": "Graduate student at Universit\u00e9 de Montr\u00e9al. My passion is designing and analyzing cross-disciplinary scientific experiments and statistical models. ", "name": "Kyle Kastner", "photo": ""}}, {"model": "schedule.speaker", "pk": 19, "fields": {"bio": "Dr. Daniel Tamayo is an astrophysicist at the University of Toronto's new Centre for Planetary Sciences, hosted at the University of Toronto, Scarborough.  He is interested in understanding how the orbits of planets and satellites evolve in and beyond our Solar System, and in developing new numerical tools for such analysis.  ", "name": "Daniel Tamayo", "photo": ""}}, {"model": "schedule.speaker", "pk": 20, "fields": {"bio": "Pete works at a certain University that will remain nameless, where he wears many figurative hats -- sysadmin, instructor, security architect, evangelist, flaneur, and blame target -- and processes an amazing amount of coffee on a daily basis.", "name": "Peter St. Onge", "photo": ""}}, {"model": "schedule.speaker", "pk": 21, "fields": {"bio": "Ryan Easterbrook is a systems engineer specializing in designing and building scalable, resilient, and highly versatile system architectures to support a wide variety of applications from web to mobile. For the past four years he's been working on platforms to support SaaS products at great companies such as EventMobi and Firmex, and before that spent two years at a startup developing the backend for social massively multiplayer online games.", "name": "Ryan Easterbrook", "photo": ""}}, {"model": "schedule.speaker", "pk": 22, "fields": {"bio": "Fran\u00e7ois Maillet is a computer scientist specializing in machine learning. He currently leads the machine learning team at Datacratic, a Montreal startup building the Machine Learning Database (MLDB).\r\n\r\nHe previously built an audio fingerprinter used by a TV advertisement monitoring company. He also did research at the Universit\u00e9 de Montr\u00e9al applying machine learning to solve problems related to music recommendation, play list generation and track auto-tagging.", "name": "Fran\u00e7ois Maillet", "photo": ""}}, {"model": "schedule.speaker", "pk": 23, "fields": {"bio": "Nicholas McIntosh is a MASc student in Chemical and Biological Engineering at The University of British Columbia's Pulp and Paper Centre in beautiful Vancouver, British Columbia. Nick's current work is centered around improving the efficiency of the mechanical pulping process. He spends most of his time thinking about capillary driven flows and modelling the structure of wood.", "name": "Nicholas McIntosh", "photo": ""}}, {"model": "schedule.speaker", "pk": 24, "fields": {"bio": "Michael (Debo) DiBernardo is the past organizer of PyCon Canada 2013 (http://2013.pycon.ca/2013.pycon.ca/), and the current maintainer of the Architecture of Open Source Applications books series (aosabook.org.) He is a technical lead of payments at Wave (waveapps.com)", "name": "Michael DiBernardo", "photo": ""}}, {"model": "schedule.speaker", "pk": 25, "fields": {"bio": "Andre is a young researcher and climate modeler; he runs regional and global climate models at the  SciNet High Performance Computing facility and analyses their output. He uses Python and its scientific software stack for data handling (or \"\"data plumbing\"\"), analysis and visualization, and develops tools for these tasks.\r\nAndre is also interested in machine learning and the use of data science techniques in and outside of climate science, and is somewhat concerned about the state of software development in science.\r\n\r\nHe cares deeply about open source software, open science, the environment and sustainable global development.", "name": "Andre R. Erler", "photo": ""}}, {"model": "schedule.speaker", "pk": 26, "fields": {"bio": "Hany Fahim is the founder and CEO of VM Farms, a 24x7 Operations Team and Cloud Provider. Hany has over 10 years of operations experience, both in building and supporting private and public cloud platforms, as well as Linux and OSS environments.", "name": "Hany Fahim", "photo": ""}}, {"model": "schedule.speaker", "pk": 27, "fields": {"bio": "James King has been learning and using Python since 2004. He works for Deamhost on their Openstack powered cloud. He has been an active and not-so-active contributor since 2012. He also likes to make games, libraries, and amusing toys with Python.", "name": "James King", "photo": ""}}, {"model": "schedule.speaker", "pk": 28, "fields": {"bio": "Nicolas Kruchten is a software engineer at Datacratic in Montr\u00e9al, Qu\u00e9bec, Canada. His interests include data visualization, control systems, economic modeling and agile methods. Nicolas\u2019 passion for technology and artificial intelligence started when he was 14, programming virtual robots in Reverse Polish Notation and real robots in assembler. His experience includes transportation system modeling, distributed evolutionary algorithms and mobile phone network performance analysis. He has been known to tinker with hardware at home, recently having modified his espresso machine to be controllable from his iPhone.", "name": "Nicolas Kruchten", "photo": ""}}, {"model": "schedule.speaker", "pk": 29, "fields": {"bio": "Dann enjoys building things, like programming languages, databases, distributed systems, communities of smart friendly humans, and pony castles with his two year old.", "name": "Dann Toliver", "photo": ""}}, {"model": "schedule.speaker", "pk": 30, "fields": {"bio": "Catherine Holloway has a Masters and most of a PhD in physics from the Institute for Quantum Computing at the University of Waterloo. She now works for Clearpath Robotics. In her spare time, she likes programming, powerlifting and progressive rock.", "name": "Catherine Holloway", "photo": ""}}, {"model": "schedule.speaker", "pk": 31, "fields": {"bio": "David Boucha is a Sr. Engineer at SaltStack, inc. David is one of the three original engineers SaltStack hired at its founding and has been involved in many aspects of Salt's growth, including core Salt features, support for the Windows platform and consulting and training some of the world's largest tech companies on using Salt.", "name": "David Boucha", "photo": ""}}, {"model": "schedule.speaker", "pk": 32, "fields": {"bio": "Mehrdad Pazooki is the founder and CEO of Tranquant Inc.. His most recent venture is a geo location based content browser. \r\nAs a data engineer he loves working on problems in the big data domain and as a business man he likes to convert data into cash.\r\nMehrdad has worked in organizations such as;\r\nIran Telecommunication's research center\r\nChango Inc.\r\nBering Media", "name": "Mehrdad Pazooki", "photo": ""}}, {"model": "schedule.speaker", "pk": 33, "fields": {"bio": "As a Development Manager at Wave, Alex Tucker has a focus on leading and mentoring teams to craft beautiful and customer focused software. While not writing Python, you can find Alex abusing JavaScript and learning the finer points of Clojure.", "name": "Alex Tucker", "photo": ""}}, {"model": "schedule.speaker", "pk": 34, "fields": {"bio": "Joseph is a Python, Django and front-end developer based in Toronto, Canada. He recently graduated with a degree in Computer Science from the University of Toronto. He is a Developer for a Toronto startup called Wave that builds accounting software for small businesses.", "name": "Joseph Kahn", "photo": ""}}, {"model": "schedule.speaker", "pk": 35, "fields": {"bio": "", "name": "Jordi Guti\u00e9rrez Hermoso", "photo": ""}}, {"model": "schedule.speaker", "pk": 36, "fields": {"bio": "", "name": "Rory Geoghegan", "photo": ""}}, {"model": "schedule.speaker", "pk": 37, "fields": {"bio": "Anita Kuno is a Cloud Automation and Distribution Engineer at HP. She works on upstream OpenStack as part of the Infrastructure team. She has mentored many new contributors on how to develop with the OpenStack Infrastructure system which includes Gerrit and Jenkins. She is a Gerrit upstream contributor.\r\n\r\nAnita served as an election official for the OpenStack Program Technical Lead Election and the Technical Committee Election for two consecutive release cycles.\r\n\r\nShe is also an astrologer and acupuncturist.\r\n\r\nShe has spoken at the follow events: FutureRuby 2009; Linux Conference Australia 2014 & 2015, SaltConf 2014. PyConAU 2014 & 2015", "name": "Anita Kuno", "photo": ""}}, {"model": "schedule.speaker", "pk": 38, "fields": {"bio": "Experienced polyglot software developer, speaker, agilist, software craftsman, extreme programming (XP) addicted and problem solver.\r\n\r\nTechnical Reviewer of \"\"Openflow Cookbook\"\" for Packt Publishing. Experience working with networking programming, Openflow, SDN (software-defined networking), NDN (named-defined networking), DevOps, virtualization and private cloud with OpenStack.", "name": "Icaro Camelo", "photo": ""}}, {"model": "schedule.speaker", "pk": 39, "fields": {"bio": "Shahriar is a Computer Science graduate. He started using Python properly in 2013 and started really liking it a few minutes after. After working in the financial industry on an in-house testing tool for developers to create regression, integration and performance tests and managing their existing unit tests in Java, C++ and Python, Shahriar joined Osper to help empower young people to manage their money responsibly. Shahriar is also the curator of the py-must-watch GitHub repository.", "name": "Shahriar Tajbakhsh", "photo": ""}}, {"model": "schedule.speaker", "pk": 40, "fields": {"bio": "Mike Fletcher is a design epistemologist (someone who studies the formation of knowledge or belief) by training, currently running a small programming consultancy in Toronto. He has been programming Python since 1995. He is a PSF Fellow and the maintainer of a number of Open Source projects, including PyOpenGL, RunSnakeRun, and OpenGLContext.", "name": "Mike Fletcher", "photo": ""}}, {"model": "schedule.speaker", "pk": 41, "fields": {"bio": "Martin has worked as a software guy in too many industries: aerospace, biotech, media, and finance. In his current role as AdvisorStream's CTO, he finally has the power to select technologies. That power went straight to his head, and thus they adopted Python and Django.", "name": "Martin Hill", "photo": ""}}, {"model": "schedule.speaker", "pk": 42, "fields": {"bio": "Michael is an Operations Engineer at Wave with 10 years of web development experience. He is responsible for providing a reliable platform for Wave's many systems, and wrote django-watchman to help him with this task.", "name": "Michael Warkentin", "photo": ""}}, {"model": "schedule.speaker", "pk": 43, "fields": {"bio": "Wesley is a software engineer that works with Groovy/Grails + Spring by day, but by night he programs his way through Python and Django. Wesley has a love for building and creating projects, large and small, utilizing a wide range of APIs such as Slack, Trello and Bitcoin. Programming is only one of Wesley's loves, he also enjoys Star Wars and Lego, combined they make for a his great collection of Star Wars Lego sets.", "name": "Wesley Stratton", "photo": ""}}, {"model": "schedule.day", "pk": 3, "fields": {"date": "2015-11-07"}}, {"model": "schedule.day", "pk": 4, "fields": {"date": "2015-11-08"}}, {"model": "schedule.room", "pk": 7, "fields": {"name": "Room A", "order": 1}}, {"model": "schedule.room", "pk": 8, "fields": {"name": "Room B", "order": 2}}, {"model": "schedule.room", "pk": 9, "fields": {"name": "Room C", "order": 3}}, {"model": "schedule.room", "pk": 10, "fields": {"name": "Tutorial Room", "order": 4}}, {"model": "schedule.slotkind", "pk": 11, "fields": {"label": "breakfast"}}, {"model": "schedule.slotkind", "pk": 12, "fields": {"label": "keynote"}}, {"model": "schedule.slotkind", "pk": 13, "fields": {"label": "break"}}, {"model": "schedule.slotkind", "pk": 14, "fields": {"label": "talk"}}, {"model": "schedule.slotkind", "pk": 15, "fields": {"label": "empty"}}, {"model": "schedule.slotkind", "pk": 16, "fields": {"label": "tutorial"}}, {"model": "schedule.slot", "pk": 30, "fields": {"day": 3, "start": "08:30:00", "end": "09:30:00", "kind": 11, "content_override": "Registration & Breakfast"}}, {"model": "schedule.slot", "pk": 31, "fields": {"day": 3, "start": "09:30:00", "end": "10:30:00", "kind": 12, "content_override": "Welcome & Morning Keynote"}}, {"model": "schedule.slot", "pk": 32, "fields": {"day": 3, "start": "12:20:00", "end": "13:40:00", "kind": 13, "content_override": "Lunch"}}, {"model": "schedule.slot", "pk": 33, "fields": {"day": 3, "start": "15:20:00", "end": "15:50:00", "kind": 13, "content_override": "Afternoon Break"}}, {"model": "schedule.slot", "pk": 34, "fields": {"day": 3, "start": "17:05:00", "end": "18:15:00", "kind": 12, "content_override": "Afternoon Keynote & Closing Messages"}}, {"model": "schedule.slot", "pk": 35, "fields": {"day": 4, "start": "09:00:00", "end": "10:00:00", "kind": 11, "content_override": "Breakfast"}}, {"model": "schedule.slot", "pk": 36, "fields": {"day": 4, "start": "10:00:00", "end": "11:00:00", "kind": 12, "content_override": "Welcome & Morning Keynote (Cameron)"}}, {"model": "schedule.slot", "pk": 37, "fields": {"day": 4, "start": "12:50:00", "end": "14:00:00", "kind": 13, "content_override": "Lunch"}}, {"model": "schedule.slot", "pk": 38, "fields": {"day": 4, "start": "16:45:00", "end": "17:15:00", "kind": 12, "content_override": "Closing Ceremonies (no keynote)"}}, {"model": "schedule.slot", "pk": 39, "fields": {"day": 4, "start": "15:40:00", "end": "16:10:00", "kind": 13, "content_override": "Break"}}, {"model": "schedule.slot", "pk": 40, "fields": {"day": 3, "start": "10:40:00", "end": "11:10:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 41, "fields": {"day": 3, "start": "10:40:00", "end": "11:10:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 42, "fields": {"day": 3, "start": "11:15:00", "end": "11:45:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 43, "fields": {"day": 3, "start": "10:40:00", "end": "11:10:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 44, "fields": {"day": 3, "start": "11:15:00", "end": "11:45:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 45, "fields": {"day": 3, "start": "11:15:00", "end": "11:45:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 46, "fields": {"day": 3, "start": "11:50:00", "end": "12:20:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 47, "fields": {"day": 3, "start": "11:50:00", "end": "12:20:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 48, "fields": {"day": 3, "start": "11:50:00", "end": "12:20:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 49, "fields": {"day": 3, "start": "13:40:00", "end": "14:10:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 50, "fields": {"day": 3, "start": "13:40:00", "end": "14:10:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 51, "fields": {"day": 3, "start": "13:40:00", "end": "14:10:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 53, "fields": {"day": 3, "start": "14:15:00", "end": "14:45:00", "kind": 15, "content_override": ""}}, {"model": "schedule.slot", "pk": 54, "fields": {"day": 3, "start": "14:15:00", "end": "14:45:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 55, "fields": {"day": 3, "start": "14:15:00", "end": "14:45:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 56, "fields": {"day": 3, "start": "14:50:00", "end": "15:00:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 57, "fields": {"day": 3, "start": "14:50:00", "end": "15:20:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 58, "fields": {"day": 3, "start": "14:50:00", "end": "15:20:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 59, "fields": {"day": 3, "start": "15:00:00", "end": "15:10:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 60, "fields": {"day": 3, "start": "15:10:00", "end": "15:20:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 61, "fields": {"day": 3, "start": "15:50:00", "end": "16:00:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 62, "fields": {"day": 3, "start": "16:00:00", "end": "16:10:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 63, "fields": {"day": 3, "start": "16:10:00", "end": "16:20:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 64, "fields": {"day": 3, "start": "15:50:00", "end": "16:20:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 65, "fields": {"day": 3, "start": "15:50:00", "end": "16:20:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 66, "fields": {"day": 3, "start": "16:25:00", "end": "16:55:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 67, "fields": {"day": 3, "start": "16:25:00", "end": "16:55:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 68, "fields": {"day": 3, "start": "16:25:00", "end": "16:55:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 69, "fields": {"day": 4, "start": "11:10:00", "end": "11:40:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 70, "fields": {"day": 4, "start": "11:10:00", "end": "11:40:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 71, "fields": {"day": 4, "start": "11:45:00", "end": "12:15:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 72, "fields": {"day": 4, "start": "11:45:00", "end": "12:15:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 73, "fields": {"day": 4, "start": "12:20:00", "end": "12:30:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 74, "fields": {"day": 4, "start": "12:30:00", "end": "12:40:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 75, "fields": {"day": 4, "start": "12:40:00", "end": "12:50:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 76, "fields": {"day": 4, "start": "12:20:00", "end": "12:50:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 77, "fields": {"day": 4, "start": "14:35:00", "end": "15:05:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 78, "fields": {"day": 4, "start": "14:35:00", "end": "15:05:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 79, "fields": {"day": 4, "start": "15:10:00", "end": "15:40:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 80, "fields": {"day": 4, "start": "15:10:00", "end": "15:40:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 81, "fields": {"day": 4, "start": "16:10:00", "end": "16:40:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 82, "fields": {"day": 4, "start": "16:10:00", "end": "16:40:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 83, "fields": {"day": 3, "start": "10:40:00", "end": "11:50:00", "kind": 16, "content_override": ""}}, {"model": "schedule.slot", "pk": 84, "fields": {"day": 3, "start": "13:40:00", "end": "15:10:00", "kind": 16, "content_override": ""}}, {"model": "schedule.slot", "pk": 85, "fields": {"day": 3, "start": "15:50:00", "end": "17:05:00", "kind": 16, "content_override": ""}}, {"model": "schedule.slot", "pk": 86, "fields": {"day": 4, "start": "14:00:00", "end": "14:30:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slot", "pk": 87, "fields": {"day": 4, "start": "14:00:00", "end": "14:30:00", "kind": 14, "content_override": ""}}, {"model": "schedule.slotroom", "pk": 63, "fields": {"room": 7, "slot": 30}}, {"model": "schedule.slotroom", "pk": 64, "fields": {"room": 8, "slot": 30}}, {"model": "schedule.slotroom", "pk": 65, "fields": {"room": 9, "slot": 30}}, {"model": "schedule.slotroom", "pk": 66, "fields": {"room": 10, "slot": 30}}, {"model": "schedule.slotroom", "pk": 67, "fields": {"room": 7, "slot": 31}}, {"model": "schedule.slotroom", "pk": 68, "fields": {"room": 8, "slot": 31}}, {"model": "schedule.slotroom", "pk": 69, "fields": {"room": 9, "slot": 31}}, {"model": "schedule.slotroom", "pk": 70, "fields": {"room": 10, "slot": 31}}, {"model": "schedule.slotroom", "pk": 71, "fields": {"room": 7, "slot": 32}}, {"model": "schedule.slotroom", "pk": 72, "fields": {"room": 8, "slot": 32}}, {"model": "schedule.slotroom", "pk": 73, "fields": {"room": 9, "slot": 32}}, {"model": "schedule.slotroom", "pk": 74, "fields": {"room": 10, "slot": 32}}, {"model": "schedule.slotroom", "pk": 75, "fields": {"room": 7, "slot": 33}}, {"model": "schedule.slotroom", "pk": 76, "fields": {"room": 8, "slot": 33}}, {"model": "schedule.slotroom", "pk": 77, "fields": {"room": 9, "slot": 33}}, {"model": "schedule.slotroom", "pk": 78, "fields": {"room": 10, "slot": 33}}, {"model": "schedule.slotroom", "pk": 79, "fields": {"room": 7, "slot": 34}}, {"model": "schedule.slotroom", "pk": 80, "fields": {"room": 8, "slot": 34}}, {"model": "schedule.slotroom", "pk": 81, "fields": {"room": 9, "slot": 34}}, {"model": "schedule.slotroom", "pk": 82, "fields": {"room": 10, "slot": 34}}, {"model": "schedule.slotroom", "pk": 83, "fields": {"room": 7, "slot": 35}}, {"model": "schedule.slotroom", "pk": 84, "fields": {"room": 8, "slot": 35}}, {"model": "schedule.slotroom", "pk": 85, "fields": {"room": 10, "slot": 35}}, {"model": "schedule.slotroom", "pk": 86, "fields": {"room": 7, "slot": 36}}, {"model": "schedule.slotroom", "pk": 87, "fields": {"room": 8, "slot": 36}}, {"model": "schedule.slotroom", "pk": 88, "fields": {"room": 10, "slot": 36}}, {"model": "schedule.slotroom", "pk": 89, "fields": {"room": 7, "slot": 37}}, {"model": "schedule.slotroom", "pk": 90, "fields": {"room": 8, "slot": 37}}, {"model": "schedule.slotroom", "pk": 91, "fields": {"room": 10, "slot": 37}}, {"model": "schedule.slotroom", "pk": 92, "fields": {"room": 7, "slot": 38}}, {"model": "schedule.slotroom", "pk": 93, "fields": {"room": 8, "slot": 38}}, {"model": "schedule.slotroom", "pk": 94, "fields": {"room": 10, "slot": 38}}, {"model": "schedule.slotroom", "pk": 95, "fields": {"room": 7, "slot": 39}}, {"model": "schedule.slotroom", "pk": 96, "fields": {"room": 8, "slot": 39}}, {"model": "schedule.slotroom", "pk": 97, "fields": {"room": 10, "slot": 39}}, {"model": "schedule.slotroom", "pk": 98, "fields": {"room": 7, "slot": 40}}, {"model": "schedule.slotroom", "pk": 99, "fields": {"room": 8, "slot": 41}}, {"model": "schedule.slotroom", "pk": 100, "fields": {"room": 8, "slot": 42}}, {"model": "schedule.slotroom", "pk": 101, "fields": {"room": 9, "slot": 43}}, {"model": "schedule.slotroom", "pk": 102, "fields": {"room": 7, "slot": 44}}, {"model": "schedule.slotroom", "pk": 103, "fields": {"room": 9, "slot": 45}}, {"model": "schedule.slotroom", "pk": 104, "fields": {"room": 8, "slot": 46}}, {"model": "schedule.slotroom", "pk": 105, "fields": {"room": 9, "slot": 47}}, {"model": "schedule.slotroom", "pk": 106, "fields": {"room": 7, "slot": 49}}, {"model": "schedule.slotroom", "pk": 107, "fields": {"room": 8, "slot": 50}}, {"model": "schedule.slotroom", "pk": 108, "fields": {"room": 9, "slot": 51}}, {"model": "schedule.slotroom", "pk": 110, "fields": {"room": 7, "slot": 53}}, {"model": "schedule.slotroom", "pk": 111, "fields": {"room": 8, "slot": 54}}, {"model": "schedule.slotroom", "pk": 112, "fields": {"room": 9, "slot": 55}}, {"model": "schedule.slotroom", "pk": 113, "fields": {"room": 7, "slot": 56}}, {"model": "schedule.slotroom", "pk": 114, "fields": {"room": 8, "slot": 57}}, {"model": "schedule.slotroom", "pk": 115, "fields": {"room": 9, "slot": 58}}, {"model": "schedule.slotroom", "pk": 116, "fields": {"room": 7, "slot": 59}}, {"model": "schedule.slotroom", "pk": 117, "fields": {"room": 7, "slot": 60}}, {"model": "schedule.slotroom", "pk": 118, "fields": {"room": 8, "slot": 61}}, {"model": "schedule.slotroom", "pk": 119, "fields": {"room": 8, "slot": 62}}, {"model": "schedule.slotroom", "pk": 120, "fields": {"room": 8, "slot": 63}}, {"model": "schedule.slotroom", "pk": 121, "fields": {"room": 7, "slot": 64}}, {"model": "schedule.slotroom", "pk": 122, "fields": {"room": 9, "slot": 65}}, {"model": "schedule.slotroom", "pk": 123, "fields": {"room": 7, "slot": 66}}, {"model": "schedule.slotroom", "pk": 124, "fields": {"room": 8, "slot": 67}}, {"model": "schedule.slotroom", "pk": 125, "fields": {"room": 9, "slot": 68}}, {"model": "schedule.slotroom", "pk": 126, "fields": {"room": 7, "slot": 69}}, {"model": "schedule.slotroom", "pk": 127, "fields": {"room": 8, "slot": 70}}, {"model": "schedule.slotroom", "pk": 128, "fields": {"room": 7, "slot": 71}}, {"model": "schedule.slotroom", "pk": 129, "fields": {"room": 8, "slot": 72}}, {"model": "schedule.slotroom", "pk": 130, "fields": {"room": 7, "slot": 73}}, {"model": "schedule.slotroom", "pk": 131, "fields": {"room": 7, "slot": 74}}, {"model": "schedule.slotroom", "pk": 132, "fields": {"room": 7, "slot": 75}}, {"model": "schedule.slotroom", "pk": 133, "fields": {"room": 8, "slot": 76}}, {"model": "schedule.slotroom", "pk": 134, "fields": {"room": 7, "slot": 77}}, {"model": "schedule.slotroom", "pk": 135, "fields": {"room": 8, "slot": 78}}, {"model": "schedule.slotroom", "pk": 136, "fields": {"room": 7, "slot": 79}}, {"model": "schedule.slotroom", "pk": 137, "fields": {"room": 8, "slot": 80}}, {"model": "schedule.slotroom", "pk": 138, "fields": {"room": 7, "slot": 81}}, {"model": "schedule.slotroom", "pk": 139, "fields": {"room": 8, "slot": 82}}, {"model": "schedule.slotroom", "pk": 140, "fields": {"room": 10, "slot": 83}}, {"model": "schedule.slotroom", "pk": 141, "fields": {"room": 10, "slot": 84}}, {"model": "schedule.slotroom", "pk": 142, "fields": {"room": 10, "slot": 85}}, {"model": "schedule.slotroom", "pk": 143, "fields": {"room": 7, "slot": 48}}, {"model": "schedule.slotroom", "pk": 144, "fields": {"room": 7, "slot": 86}}, {"model": "schedule.slotroom", "pk": 145, "fields": {"room": 8, "slot": 87}}, {"model": "schedule.presentation", "pk": 14, "fields": {"title": "ORM your ORM", "additional_speakers": [], "slot": 40, "description": "\"In this talk we'll present the inconveniences of working directly with objects returned by an ORM. We'll discuss:\r\n\r\n- the issues of having database sessions attached to objects;\r\n- the ability to maintain independence and flexibility around different storage solutions;\r\n- and we will also talk about the general question of how to decide which object layer you should base your application logic on.\r\n\r\nThis talk is inspired by a real-world use case, and we'll present the before and after states of implementing our current (production) solution: a database-agnostic data service API that promotes immutable objects for any module to consume.\"", "cancelled": false, "speaker": 9}}, {"model": "schedule.presentation", "pk": 15, "fields": {"title": "Is your Python application secure?", "additional_speakers": [], "slot": 41, "description": "In today\u2019s world, it's easier than ever to innovate and create great web applications. You release often, but let\u2019s be honest, if you're like most developers out there, you don't spend your days worrying about security. You know it\u2019s important, but you aren\u2019t security savvy. So ask yourself, is your Python application secure? Come learn some of the different ways a hacker (cracker) can attack your code, and some of the best practices out there. In the end, your security is your users\u2019 security.", "cancelled": false, "speaker": 10}}, {"model": "schedule.presentation", "pk": 16, "fields": {"title": "Hacking Structural Biology with Python and Pandas", "additional_speakers": [], "slot": 43, "description": "The dynamic motions of biomolecules like DNA, RNA, and proteins are integral to our understanding of drugs, disease, and human health. By performing large-scale supercomputer simulations, one can model the motion of proteins in ways impractical or impossible using traditional lab bench experiments. \r\n\r\nWhile data science approaches are ubiquitous in the field of genomics, commonly dealing with massive genetic sequence and expression datasets, the application of \"\"big data\"\" methodology is infrequently used in the field of structural biology due to the high computational expense of running simulations. However, advances in high-performance computing are resulting in increased dataset sizes and data analysis is emerging as the primary bottleneck to scientific discovery.\r\n\r\nIn this talk, I present the use of Python and Pandas to accelerate analysis of time series data extracted from molecular dynamics trajectories. The application of this approach is directed at the study of the voltage-gated sodium channel, a protein found in human neurons that is responsible for propagating nerve impulses. Using a Jupyter notebook, I perform exploratory analysis on a large dataset of trajectories and arrive at a mechanistic model for the function of this protein. This model may then be used to quantify how genetic diseases and drugs might alter the function of the protein in subsequent research.\"", "cancelled": false, "speaker": 11}}, {"model": "schedule.presentation", "pk": 17, "fields": {"title": "Python's New Type Hints in Action... In JavaScript", "additional_speakers": [], "slot": 44, "description": "Depending on who you ask, PEP 484's Type Hints are either the next big thing in Python, or the harbinger of doom upon our entire community. Which is it?\r\n\r\nAllowing optional static typing in Python will bring with it some benefits that other languages have had for years: IDEs will be able to do code completion better; a whole class of boring tests will fall out automatically; and some bugs will be easier to catch. \r\n\r\nBut this is also undeniably a huge change of direction: will it mean you have to substantially change your code style? Will Python's simple expressiveness suddenly become unattainable thanks to clumsy Java-style type declarations?\r\n\r\nTo show how PEP 484's Gradual Typing system works, we're going to look at TypeScript, a minimal implementation of Gradual Typing over JavaScript. We'll see how the type system works, and how it fits into the already thriving JavaScript developer community, where most people aren't using type hints at all.\r\n\r\nWe'll draw some parallels with how Python's implementation will work, and see what Python can learn from a language that has successfully made the jump to a type-hinted world.", "cancelled": false, "speaker": 12}}, {"model": "schedule.presentation", "pk": 18, "fields": {"title": "How Python helped create Emmy nominated Visual Effects for the TV Show Vikings", "additional_speakers": [], "slot": 42, "description": "The extent to which programming is used in the production of Visual Effects can be somewhat of a mystery to an outsider of the field. Broadly speaking, it is used by 4 sets of people / categories with overlapping responsibilities.\r\n\r\nComputer Graphics Engineers, Math, CS, Physics PhD\u2019s and others in similar positions undertake the responsibility of very low level research and development such as creation of \u2018shading\u2019 and \u2018rendering\u2019 solutions, implementation of physics simulation algorithms, etc. Their development efforts help create the core toolset artists utilize when creating visuals. They either extend the possibilities that existing 3D software packages offer (like Maya, 3DS Max, Houdini and more) or create entirely new tools.\r\n\r\nPipeline TD\u2019s and Engineers build and maintain the visual effects studio pipeline and help facilitate the production efficiently by managing the data-flow. This mainly involves building tools and plugins that interface with the 3D software packages that are in use or creating stand-alone desktop applications.\r\n\r\nTechnical Directors for each department address the particular needs of their departments by building scripts, tools, plugins \u2014 whatever the problem at hand requires. They usually interface with the tools that Engineers upstream build and with the 3D software packages that are already in use to achieve the solutions that they are after.\r\n\r\nEager Artists aka Budding Programmers are artists that are frustrated by the limitations of the toolset that they are given and devise automation solutions using the API of the software in use to build scripts and tools that helps with the redundant, repetitive, boilerplate tasks.\r\n\r\nAlmost all the software packages that are used in VFX nowadays have a Python API. Moreover programs are moving towards using PySide in implementing their visual interface, which further enables artists to utilize this toolkit to build their own GUI solutions \u2014 either integrated to the software or as a standalone desktop application. Wherever you look, Python dominates the VFX landscape \u2014 except for tasks that are performance critical. From the low level workings of the studio pipeline to the front-end of Visual Effects production where viewer facing visuals are created, Python facilitates delivery of cutting edge effects on time and on budget.\r\n\r\nWhen a group of visual effects artists were asked to deliver an episode for an immensely popular TV Show involving one of the biggest CG battle scenes to be ever seen on the TV so far, it was obvious that Python was going to play a huge part in their workflow.\r\n\r\nThis talk focuses on the perspective of the artists and technical directors in this VFX landscape and various ways they utilize Python in production to come up with solutions for movies and shows that entertains millions of people around the globe.", "cancelled": false, "speaker": 13}}, {"model": "schedule.presentation", "pk": 19, "fields": {"title": "Matplotlib: Up and Running", "additional_speakers": [], "slot": 45, "description": "Matplotlib is the de facto standard for data visualization in Python, but getting started with it can be a little bit tough. Take a look at three different matplotlib tutorials, and chances are, you'll see at least two, if not three, different ways to interact with matplotlib! Understanding the correct way may not always be obvious. \r\n\r\nNow, fast forward past the basics. You've created a few visualizations with the aid of whatever tutorials you've found online, but you still don't feel like you have a good grip on how matplotlib works. You call the plot function several different ways and it seems to work just fine in the tutorials, but it doesn't seem to be doing what you want it to now. Oh, and not to mention, why do I need to call the show() function sometimes and not others? These are all the types of questions that I had when I was first learning matplotlib and it took a bit of work to find the answers to all of them. \r\n\r\n In this talk I cover everything that I wish I knew when I was first learning matplotlib. I'll cover the three main interfaces to the library: pylab, pyplot, and the OO API, and you'll learn when and how to use each one. Then we'll go into a bit more detail on the architecture of matplotlib, and deep dive into the plot function to understand just how versatile it is and where its limits arise. Finally, we'll look at several new libraries built atop the venerable visualization library that have come about in the past few years to take matplotlib to the next level. During the course of the talk, you'll also see several tips and tricks to make matplotlib a little friendlier.\r\n\r\n It's been my observation that getting started with matplotlib is easy due to the wealth of tutorials online. A problem does tend to arise, however, when a tutorial can't be found for the current task at hand. Many times I've seen individuals, who have used matplotlib in the past, at a loss when they need to do something they've never done before. The goal of this talk is to give the attendees the understanding they need to reason properly about the library and to make it possible for them to move away from copy-n-paste coding to actually writing up their own visualization scripts.", "cancelled": false, "speaker": 14}}, {"model": "schedule.presentation", "pk": 20, "fields": {"title": "Using Python and Docker to create a novel and scalable development environment solution.", "additional_speakers": [], "slot": 48, "description": "Local development environments are essential tools which help us run code on our own machines. Good development environments help us efficiently manage our workflow as we make code changes, and they can be adapted to fit a changing stack and team. In this talk, we\u2019ll look at shortcomings of different development environment solutions, and how we\u2019ve attempted to solve them with Python and Docker.\r\n\r\nThe simplest solution is to just run your app on the command line - for example with python my_app.py. This is easy and works well if your setup is simple.  But as you scale your stack, adding apps and developers, this approach becomes problematic.  When you have more than one app to run, you can run into dependency conflicts between apps.  When you add more developers, it becomes a challenge to reproduce your system configuration so that each app runs smoothly on each developer\u2019s machine. Virtualenvs help these issues by providing a measure of isolation and reproducibility.  However they only partly solve the problem; environment variables, system libraries, and other system configuration all hamper reproducibility and isolation.\r\n\r\nA common approach to these problems is to run code in a virtual machine.  This does increase the portability of an environment, but still comes with some issues.  Changing dependencies and configuration over time can prompt changes in the VM system state, which can create the same reproducibility issues as before.  Configuration management software can help, but comes with its own set of issues.  Additionally, virtual machines come with performance penalties; shared folders have poor performance, and the VM will consume tons of memory if you have a large stack.  Finally, apps running on the same VM can still suffer from lack of isolation. Conflicting system dependencies, apps that want to listen on the same port, and other issues will require workarounds.\r\n\r\nDocker containers provide an opportunity to improve on these shortcomings.  Containers are by nature isolated and portable, and they come without the performance overhead that\u2019s associated with virtual machines. However there are still problems to solve before containers can be managed easily in a development environment workflow. How are the containers launched in a reproducible way?  How are containers connected so that they can communicate as needed?  What happens when we need to make changes to the stack being run? We\u2019ve built a Python app which manages docker containers and abstracts these processes.  Dusty (dusty.gc.com) knows how to run an arbitrarily complex stack based on a set of defined specs, and provides other workflow management features. We think that this approach is more portable, more scalable, and easier to use than other development environment solutions capable of running complex stacks.", "cancelled": false, "speaker": 15}}, {"model": "schedule.presentation", "pk": 21, "fields": {"title": "Exploring our Python Interpreter", "additional_speakers": [], "slot": 46, "description": "During my last CPython sprint, I started to contribute to the CPython code, and I wanted to understand the beast.\r\n\r\nIn this case, there is only one solution, trace the code from the beginning. From the command line to the interpreter, we will take part to an adventure.\r\n\r\n* Overview of the structure of the Project and the directories.\r\n* From the Py_Main function, to the interpreter\r\n* the used technics for the Lexer, Parser and the generation of the AST and of course of the Byte Code.\r\n* we will see some byte codes with the dis module\r\n* How does VM works, it\u2019s a stack machine.\r\n* the Interpreter and its main loop of the Virtual Machine.\r\n\r\nThe idea behind is just to show how CPython works for a new contributor to CPython", "cancelled": false, "speaker": 16}}, {"model": "schedule.presentation", "pk": 22, "fields": {"title": "Deconstructing Django with Flask", "additional_speakers": [], "slot": 47, "description": "Motivation: With the rise of micro services, API first sites and mobile the draw of a lightweight framework is stronger than ever.  Django and its proscriptive batteries included approach can feel too heavy.\r\n\r\n- Django is awesome, but maybe I'm missing something with Flask thing. OMG, where do I start, there my so many choices\r\n  - Major components of Django: ORM, routing, templating, views, forms, migrations, configuration, ReST, models, tasks, tests, static assets, authentication, sessions etc\r\n  - templating, forms, static assets aren\u2019t really needed for api/mobile use cases\r\n  - for each remaining component offer the \u201cbest\u201d flask library\r\n  - build out a small API only app together using the \"\"best\"\" flask library", "cancelled": false, "speaker": 17}}, {"model": "schedule.presentation", "pk": 23, "fields": {"title": "Neural networks for raw data processing", "additional_speakers": [], "slot": 49, "description": "Neural networks have had a recent revival in the machine learning community. The power of these tools can be used *without* in depth knowledge of how to train them - much as packaged binaries can be used for different tasks without compiling from source.\r\n\r\nWe will discuss the applications of these approaches, how these methods are different than others for machine learning, and what recent advances in the field mean for people trying to solve problems in the real world.", "cancelled": false, "speaker": 18}}, {"model": "schedule.presentation", "pk": 24, "fields": {"title": "REBOUND, a high-performance Python/C package for simulating planetary and satellite orbits", "additional_speakers": [], "slot": 50, "description": "\"I will present REBOUND, an open-source package that can be used to simulate the motion of bodies in the Solar System, extra-solar planetary systems and Saturn\u2019s rings. REBOUND has been developed by a group of astrophysicists at the University of Toronto. My talk will focus on several design challenges that we faced during the development, finding a balance between efficiency and usability that might be of wide interest to people working on high performance python code.\r\n\r\nWe opted for a design where all time-consuming algorithms are implemented in C. However, to easily setup and manipulate simulations, we developed a Python module to interface with REBOUND. This makes REBOUND very easy to use and allows us to leverage the power of Python and its supporting libraries to analyze and visualize simulation results.  \r\n\r\nI will do a live demo and show how one can use REBOUND to simulate the Solar System with initial positions of planets, moons and spacecraft from a NASA database in just a few minutes.\"", "cancelled": false, "speaker": 19}}, {"model": "schedule.presentation", "pk": 25, "fields": {"title": "What you can do with Python, a relational database, SVN, and a little scripting in a data center", "additional_speakers": [], "slot": 51, "description": "The ability to rapidly deploy is a key element of any devops strategy, and the ability to stage and redeploy hardware is no different, especially in a large institution hosting 230+ networks.\r\n\r\nFaced with an Institutional requirement to replace ALL of the 230+ border (demark) switches connecting academic and administrative departments to the University backbone in a cost-effective and timely manner, and the complication of dealing with a seriously high-latency practice to prepare networking hardware for first use, we were able to leverage elements of Python, Subversion, and PostgreSQL to massively scale up and speed up our capacity to stage and field new equipment, improving service levels and by extension providing a key element of internal DR/BC practice.\r\n\r\nAlthough the project was left fallow after the initial replacement was completed, the lessons learned from this project have been very valuable when future projects were planned. This talk will focus generally on the problems at hand, focus on the solution architected and implemented, and end with specific points to remember during similar efforts in the future.", "cancelled": false, "speaker": 20}}, {"model": "schedule.presentation", "pk": 26, "fields": {"title": "Building Highly Decoupled Systems in Python", "additional_speakers": [], "slot": 54, "description": "With various architecture decisions like Microservices, Restful APIs, MVC, and many more being widely discussed, it's often difficult to determine what you need to build your application. However, these patterns and many other well designed architectures follow common best practices including low coupling, high cohesion, and strong interfaces. Understanding these underlying principals is key to making the best decisions for your use case.\r\n\r\nIn this discussion we will explore how highly decoupled systems with strong interface boundaries aid in the maintainability and velocity of a project, and how to build such a system using python.", "cancelled": false, "speaker": 21}}, {"model": "schedule.presentation", "pk": 27, "fields": {"title": "Epic NHL goal celebration hack with a hue light show and real time machine learning", "additional_speakers": [], "slot": 55, "description": "This talk shows how Python was used to trigger an epic sound and light show whenever the Montreal Canadiens hockey team scored a goal in last season's playoffs.\r\n\r\nThe author trained a machine learning model to detect in real-time that a goal was just scored by the Habs based on the live audio feed of a game and to trigger a light show using Philips hues in his living room. The system was built using various Python modules, more specifically scikit-learn, pyaudio, librosa, phue and bottle.\r\n\r\nThe talk will cover every step of the hack from the creation of the dataset, the feature generation and the machine learning model training, the real-time audio feed processing to do real-time scoring and the programming of the light show.", "cancelled": false, "speaker": 22}}, {"model": "schedule.presentation", "pk": 28, "fields": {"title": "Using Python to characterize the structure of wood.", "additional_speakers": [], "slot": 56, "description": "The energy-intensive nature of the mechanical pulping production process (disassembling wood chips into their constituent fibres to make pulp) has resulted in a great deal of work in the area of energy reduction strategies for the process. Prior-to-pulping wood chip compression processes fit this bill exactly and have been shown to reduce the energy consumed by the process as a whole by up to 15%, but are less than fully understood in their mechanism of action. This talk will cover the development of the computational and experimental tools that have been developed to characterize wood chips, and, ultimately, better understand the mechanics of the chip-compression process as a whole. Specifically: the development of an image analysis (via OpenCV)/model fitting (via scikit-learn) data analysis pipeline has allowed for a quantitative assessment of the micro-structure of wood.", "cancelled": false, "speaker": 23}}, {"model": "schedule.presentation", "pk": 29, "fields": {"title": "Maximize the moment: Practical teaching hacks", "additional_speakers": [], "slot": 59, "description": "How many times a day do we ask or answer a question of our fellow engineers? What if we could turn all of these interactions into opportunities for deep learning? This talk will explore a few low-effort techniques from research-based teaching principles we can use to make the most of the knowledge sharing that each of us do every day.", "cancelled": false, "speaker": 24}}, {"model": "schedule.presentation", "pk": 30, "fields": {"title": "Orchestrating a Climate Modeling Data Pipeline", "additional_speakers": [], "slot": 60, "description": "In order to run high-resolution regional climate models, it is necessary to interpolate and pre-process large amounts of data from a global climate model at the boundaries of the regional model. Several C and Fortran tools are available in the scientific community to achieve different aspects of this task, but communication between these tools is limited to the filesystem (the program/tool reads input from a file and writes output to a file). In a High Performance Computing (HPC) environment, filesystem access is a bottleneck and temporary files should be avoided.\r\n\r\nIn this talk I will show how a Python driver module and an in-memory filesystem (RAM disk) can be used to orchestrate the data flow between various tools without creating temporary files on disk and fully automate the entire process.\r\nExcept for the first input and the last output step, all file I/O is redirected to the RAM disk. The process can also be parallelized in the Python driver module by distributing different input files to different processes using Python multiprocessing.\r\nThe use of this technique leads to a speed-up of 800% compared to traditional methods, and requires no human intervention.\r\n\r\nDifferent input datasets are supported and new datasets can be added easily due to the object oriented implementation: at every stage of the pre-processing pipeline a dataset method can be overloaded and a different tool can be used, depending on the input dataset.\r\nThis would not have been possible in a simple scripting language that might otherwise be used to automate such a process.\r\n\r\nThis module (called PyWPS), is part of the WRF Tools package, a set of Python modules and shell scripts designed to facilitate the operation of a regional climate model (the Weather Research and Forecasting model - WRF) in a HPC environment. It is capable of autonomously running the model over extended periods of time (including automatic crash handling and restarts), automatic pre- and post-processing and archiving.\r\n\r\nIn the presentation I will first provide some context on regional climate modeling and its computational challenges, before detailing the main design features of the Python WRF pre-processing system (PyWPS).\r\n\r\nThe package is available on GitHub: https://github.com/aerler/WRF-Tools", "cancelled": false, "speaker": 25}}, {"model": "schedule.presentation", "pk": 31, "fields": {"title": "Earthquakes and the Moon", "additional_speakers": [], "slot": 57, "description": "Timekeeping is no easy business. This talk tells the story of how earthquakes and even the Moon force the concept of the \"leap second\", and the debacle in 2012 that took down most of the Internet. It also goes into some detail at how Python is handling this scenario.", "cancelled": false, "speaker": 26}}, {"model": "schedule.presentation", "pk": 32, "fields": {"title": "Data Oriented Programming in Python", "additional_speakers": [], "slot": 58, "description": "You might have heard from smart people that dynamic languages are not suitable for large projects. We're going to look at what it takes to manage one of the largest Python projects powering public clouds at Dreamhost and Rackspace as well as private ones at CERN: Openstack!\r\n\r\nWe'll gather some data about current Openstack deployments used in production, review some source code from various projects, see some anecdotes from devops people who deploy these systems, and explore the infrastructure and quality assurance processes used to maintain this massive code base.", "cancelled": false, "speaker": 27}}, {"model": "schedule.presentation", "pk": 33, "fields": {"title": "Make Jupyter/IPython Notebook even more magical with cell magic extensions!", "additional_speakers": [], "slot": 64, "description": "* My talk will start out with a brief explanation of what Jupyter is (the project formerly known as IPython Notebook) and how to launch it.\r\n* I will demo how to run a few lines of Python in Jupyter, and how to create text cells with Markdown and LaTeX.\r\n* I will then demo some of the built-in 'cell magic' extensions like running bash commands and displaying plots inline.\r\n* I will then show some additional off-the-shelf extensions like the SQL and Graphviz ones, and show how to export a notebook to web-based slides. \r\n* I will then show how one can build and use a useful new cell magic extension (an interactive HTTP client) in Python, using Jupyter's built-in web-based text editor.", "cancelled": false, "speaker": 28}}, {"model": "schedule.presentation", "pk": 34, "fields": {"title": "RPython: turtles all the way down", "additional_speakers": [], "slot": 61, "description": "We'll describe a small Logo-inspired language for communicating with turtles, and talk about the implementation of that language in RPython -- a toolkit for building interpreters for dynamic languages, and part of the PyPy project. \r\n\r\nOf particular interest are the performance characteristics of building the interpreter with RPython instead of running it directly, and where that performance increase originates: RPython's meta-tracing framework creates a custom tracing JIT VM for our interpreter. This gives us compiler-like performance for the cost of an interpreter, which is a pretty great bargain, and stands to permanently alter the dynamics of building dynamic languages.", "cancelled": false, "speaker": 29}}, {"model": "schedule.presentation", "pk": 35, "fields": {"title": "500 Lines or Less", "additional_speakers": [], "slot": 62, "description": "Architects look at thousands of buildings during their training, and study critiques of those buildings written by masters. In contrast, most software developers only ever get to know a handful of large programs well\u2014usually programs they wrote themselves\u2014and never study the great programs of history. As a result, they repeat one another's mistakes rather than building on one another's successes.\r\n\r\nThe Architecture of Open Source Applications (aosabook.org) is a book series that aims to change this. The fourth volume (\"\"500 Lines or Less\"\", github.com/aosabook/500lines/) contains 20 short examples of canonical programs written and explained by experienced software developers. This talk will give a brief overview of the book, and will explore the most surprising lessons we learned by producing it.", "cancelled": false, "speaker": 24}}, {"model": "schedule.presentation", "pk": 36, "fields": {"title": "Data Mining Robots: Using Seaborn and Pandas with the Robot Operating System", "additional_speakers": [], "slot": 63, "description": "The Robot Operating System (ROS) is an open-source project that facilitates communication between robotic components such as motors, cameras, and other sensors, and computational nodes such as movement commands and pose estimation. However, acquiring and analysing data from ROS can be a little tricky. In this talk, I will go over a few examples of loading data from saved files and live ROS processes using Python with the Pandas and Seaborn libraries. ", "cancelled": false, "speaker": 30}}, {"model": "schedule.presentation", "pk": 37, "fields": {"title": "Beyond Configuration Management with SaltStack for Event-Driven Infrastructure", "additional_speakers": [], "slot": 65, "description": "Congratulations, you've mastered configuration management. So now what? SaltStack is not just configuration management. Intelligent orchestration and automation will help to optimize your infrastructure allowing the dynamic adjustment of infrastructure resources based on monitored changes and events. Dave will provide an overview and demonstration of SaltStack Beacons to monitor systems and the SaltStack Reactor to orchestrate automated, pre-programmed responses. Now that 3:00 AM text message notifies you that a problem has been fixed instead of calling you into the data center for the rest of the night.", "cancelled": false, "speaker": 31}}, {"model": "schedule.presentation", "pk": 38, "fields": {"title": "Fraud detection in \"real time\" with Spark", "additional_speakers": [], "slot": 66, "description": "We will explore ways of detecting fraud in a stream of data. In a stream of data we want to make sure that we won't receive too many requests from the same source or we might be curious about finding a specific pattern. \r\nIn this talk we will see how Spark can help us with the help of probabilistic data structures.", "cancelled": false, "speaker": 32}}, {"model": "schedule.presentation", "pk": 39, "fields": {"title": "Immutable Django", "additional_speakers": [], "slot": 67, "description": "Stop using the Django ORM for evil and embrace the light of Event Sourcing and Domain Driven Design. Learn how to start thinking about your system's behaviour instead of state all while still leveraging the power of Django's ORM. \r\n\r\nFirst, learn about the history and philosophy of DDD and Event Sourcing and how it applies to software today.\r\n\r\nNext, learn simple patterns of approaching DDD in your application today.\r\n\r\nFinally, learn how to use the Django ORM to create a race condition free  Event storage and efficient Read Models.", "cancelled": false, "speaker": 33}}, {"model": "schedule.presentation", "pk": 40, "fields": {"title": "How Wave does Database Sharding with Django", "additional_speakers": [], "slot": 68, "description": "I'll be touching on the following:\r\n- Why we sharded in the first place, why you need to at scale and why it's virtually unavoidable.\r\n- What we tried to do to push sharding off and why those didn't work.\r\n- Now that you want to shard, why it's annoying. There's increased complexity, no joins across DBs, no foreign key relationships either and some ORM features are lost as well. You now need proper transaction management.\r\n- Now that you probably don't want to shard, what benefits are their for the system and the developer. How does this affect storage and performance.\r\n- Now that you want to shard, what the different ways to shard your data is. Sharding by app or model or by identifier. Horizontal vs Vertical sharding.\r\n- A short explanation of our original sharding strategy at Wave and the pitfalls we fell into, mistakes we made and heartaches we suffered.\r\n- Why you want globally unique identifiers.\r\n- How our new sharding infrastructure works (hopefully open sourced completely do this talk) with code to back it up.\r\n---- The router and how to set it up to work with read slaves as well and the strategies we use for balancing.\r\n----- The ID generation of globally unique ids.\r\n----- The storage of shards so you can retrieve a User's data.\r\n----- The changes to Django migrations to adapt them to work with sharding as we do it and why we do it that way.\r\n----- re-balancing of shards and how we accomplish this on a small scale of a user and how we would do that on a larger scale.\r\n----- additions to the admin we made (very brief).\r\n----- How we implement models on top of that infrastructure with an example as well as using/saving/retrieving that model.\r\n----- Using transactions with shards, simple example.\r\n----- Adding a new shard to the system.\r\n- Benefits of the new system over the old.\r\n- Closing remarks", "cancelled": false, "speaker": 34}}, {"model": "schedule.presentation", "pk": 41, "fields": {"title": "Django Rest Framework: The Good & The Bad", "additional_speakers": [36], "slot": 69, "description": "Have you ever spent way too much time writing an API, and hoped there was a better way? Well, there is! The Django REST Framework (DRF) is a very generic framework for simplifying the creation of your API. In this talk, we will present how the DRF puts together serializers, validators, views, and everything else together into a flexible tool for creating any kind of REST API you may want. Like any framework, there are certain things it makes difficult to do, and we will talk about the problems we faced and solved while making our API do just what we wanted it to do.", "cancelled": false, "speaker": 35}}, {"model": "schedule.presentation", "pk": 42, "fields": {"title": "Wax On, Wax Off: The Tough Love Guide to Mentoring", "additional_speakers": [], "slot": 70, "description": "Everyone has more bugs than they can fix, more features they would like than time to write them. Wouldn't it be great to have some help? The problem is who knows enough about what you know to actually provide help the way you need?\r\n\r\nOpen Source has lots of fans and supporters, but many newcomers need the warmth of a person caring about their existence to actually turn them into a contributor.\r\n\r\nSomeone sees you working, is enamoured of what you do and wants to learn. You could break down the steps of what you are doing and get them to follow those steps, that is teaching.\r\n\r\nYou could recognize the deep inner understanding the is the foundation of your behaviour. You could decide to help someone build such a foundation for themselves. That is mentoring.\r\n\r\nMentoring is helping someone to fail and learn from it. Mentoring is about witnessing someone else's journey, whereever they go, whereever it takes them and saying I'm here, I'm with you, I'm watching. Mentoring is 99% listening.\r\n\r\nMentoring is much more time consuming than teaching. Teaching helps someone learn a skill, mentoring helps someone learn themselves.\r\n\r\nNow don't get me wrong, teaching is great and we need teachers and to be taught plus many great teachers can also be mentors. Teaching and mentoring are different.\r\n\r\nThis talk will discuss mentoring.\r\n\r\nAnita will endeavour to share what she has learned about mentoring. She hopes you will take away the ability to recognize the difference between teaching and mentoring. She also hopes that should you decide to mentor you have some resources to help you strengthen your mentoring skills.", "cancelled": false, "speaker": 37}}, {"model": "schedule.presentation", "pk": 43, "fields": {"title": "Networks and Innovation: A lot of programming inside", "additional_speakers": [], "slot": 71, "description": "Current networks don't have the ability to provision network services quickly and easily.\r\nWe need rapid provisioning of network services to virtual machines in a data center environment and improve network visibility and reduced operational costs. \r\n\r\nSoftware-Defined Networking is a way to start building a more open and dynamic network. It means a network can ramp up or ramp down network resources and adapt to sharp, unpredictable spikes in demand much easier than traditional networks. \r\n\r\nTo implement SDN, we use Opendaylight and Mininet (a python library) to rapidly prototype our network and create proof of concepts capable of being demonstrated and proved easily.", "cancelled": false, "speaker": 38}}, {"model": "schedule.presentation", "pk": 44, "fields": {"title": "An example-led discussion of mocking in Python; iwhen to use it and when not to use it.", "additional_speakers": [], "slot": 72, "description": "The talk will introduce the mocking facilities in Python and shows the basics of how to use it. We will then go through a real-life example of mocking a public API (there will be an option of 3 APIs and the audience can choose which one I should work on) to show the library being used in a proper example and considering when its not a good idea to use it.", "cancelled": false, "speaker": 39}}, {"model": "schedule.presentation", "pk": 45, "fields": {"title": "Embrace the singularity", "additional_speakers": [], "slot": 76, "description": "Machine Learning has been making fantastic advances lately. Problems of classification, recognition, modelling and prediction are currently being optimized to almost-human-level accuracy. Python is used in many research groups to explore Machine Learning approaches, and provides many libraries that allow novices to code non-trivial networks with minimal work. Large corporations have moved from research to deployment. Machine Learning has proven itself useful, and we seem to be getting tantalisingly close to something that could be a \u201ctrue\u201d strong A.I. \r\n\r\nBut shadowing these achievements there is a rising fear in society that we will open Pandora\u2019s box, that our creation will decide that we need to be eliminated. We cannot dismiss those concerns out-of-hand as our track-record as a profession is littered with cases where we have lacked foresight. We should address the concerns now, before the box is sitting in our hands.\r\n\r\nWhere are we on the road to creating a strong A.I.? How would we recognize a strong A.I.? What can we currently do with Machine Learning, what are the approaches we currently use, and where are they likely to lead over the next few years?\r\n\r\nAre there fundamental missing pieces that prevent a \u201chuman-like\u201d strong A.I. from developing? Are there scale or resources standing in the way? What are the (moral) considerations in developing a strong A.I.? What about in shutting one down? What are the threat models involved in \u201cstanding up\u201d a strong A.I.? What can be done to mitigate those threats?\r\n\r\nThis talk may include code samples, for which a passing familiarity with Numpy or Theano might be helpful, but the focus for the discussion will be on the algorithms,  epistemology and how we as programmers should approach our attempt to develop an artificial mind.", "cancelled": false, "speaker": 40}}, {"model": "schedule.presentation", "pk": 46, "fields": {"title": "Building a Django app with Viewflow", "additional_speakers": [], "slot": 73, "description": "Some applications, particularity those used in enterprise, have use cases the involve a workflow. Most web frameworks, Django included, don't address this specific need. Developers can build their own, but an ad-hoc approach can be hard to maintain. I'd like to share our experience solving this challenge using the Viewflow library.", "cancelled": false, "speaker": 41}}, {"model": "schedule.presentation", "pk": 47, "fields": {"title": "Full-stack Django application monitoring with django-watchman", "additional_speakers": [], "slot": 74, "description": "Monitoring your websites can be tricky. Many people set up a Pingdom endpoint on their home page, and call it a day; however this doesn't guarantee that all of the back end systems required for a functioning site are actually working.\r\n\r\nThis talk will dive into how to use django-watchman to enhance your monitoring coverage. Topics include:\r\n\r\n* How to install and configure django-watchman\r\n* What monitoring checks it provides out of the box\r\n* How authentication works\r\n* The three ways to use django-watchman: API, dashboard, and management command\r\n* How to integrate django-watchman with automated tools like Pingdom\r\n* How to write your own custom django-watchman checks", "cancelled": false, "speaker": 42}}, {"model": "schedule.presentation", "pk": 48, "fields": {"title": "Django and the joys and benefits of live coding", "additional_speakers": [], "slot": 75, "description": "With the rise of live video streaming, such as Periscope for social and Twitch/Youtube for gaming, there has been a rise in the interest in sharing what you're currently doing with the world as well as also interacting with those people who choose to watch what you're streaming. One of the biggest problems with learning and/or improving your programming abilities is not always being able to get instant feedback on demand or having others provide helpful suggestions instantly. Bring forth a platform that allows programmers to share their projects live and interact with those viewing their stream, LiveCoding.tv.\r\n\r\nDjango and the joys and benefits of live coding seeks to cover Wesley's most recent Bitcoin project that was built solely while streaming with LiveCoding.tv. Django and the joys and benefits of live coding will cover the basics of Wesley's project as well as the trials, tribulations, pros and cons of building a project live in front of people from all over the globe, all walks of life, all programming backgrounds and skill levels.\r\n\r\nIf you're looking for a platform where you can help others, get help from other, watch other create projects or just socialize in real time with other programmers Django and the joys and benefits of live coding is a talk for you.", "cancelled": false, "speaker": 43}}]